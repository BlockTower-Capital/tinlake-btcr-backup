import { ContractNames, Constructor, TinlakeParams, PendingTransaction } from '../Tinlake';
import BN from 'bn.js';
export declare function AdminActions<ActionsBase extends Constructor<TinlakeParams>>(Base: ActionsBase): {
    new (...args: any[]): {
        canQueryPermissions: () => boolean;
        isWard: (user: string, contractName: string) => Promise<BN>;
        canSetInterestRate: (user: string) => Promise<boolean>;
        canSetSeniorTrancheInterest: (user: string) => Promise<boolean>;
        canSetRiskScore: (user: string) => Promise<boolean>;
        canSetMinimumJuniorRatio: (user: string) => Promise<boolean>;
        canSetInvestorAllowanceJunior: (user: string) => Promise<boolean>;
        canSetInvestorAllowanceSenior: (user: string) => Promise<boolean>;
        canSetLoanPrice: (user: string) => Promise<boolean>;
        existsRateGroup: (ratePerSecond: string) => Promise<boolean>;
        initRate: (ratePerSecond: string) => Promise<unknown>;
        changeRate: (loan: string, ratePerSecond: string) => Promise<unknown>;
        setRate: (loan: string, ratePerSecond: string) => Promise<unknown>;
        setMinimumJuniorRatio: (ratio: string) => Promise<{
            hash: any;
            contractKey: string;
            timesOutAt: number;
        }>;
        approveAllowanceJunior: (user: string, maxCurrency: string, maxToken: string) => Promise<unknown>;
        approveAllowanceSenior: (user: string, maxCurrency: string, maxToken: string) => Promise<unknown>;
        provider: any;
        eth: import("../services/ethereum").ethI;
        ethOptions: any;
        ethConfig: import("../Tinlake").EthConfig;
        ethersConfig: import("../Tinlake").EthersConfig;
        contractAddresses: import("../Tinlake").ContractAddresses;
        transactionTimeout: number;
        contracts: import("../Tinlake").Contracts;
        ethersContracts: import("../Tinlake").Contracts;
        contractAbis: import("../Tinlake").ContractAbis;
        contractConfig: any;
        setProvider: (provider: any, ethOptions?: any) => void;
        setContracts: () => void;
        setEthConfig: (ethConfig: import("../Tinlake").EthConfig) => void;
        setEthersConfig: (ethersConfig: import("../Tinlake").EthersConfig | undefined) => void;
        createEthContract(address: string, abiName: string): void;
        createContract(address: string, abiName: string): import("ethers").Contract;
        getContract(address: string, abiName: string): import("ethers").Contract;
        getTransactionReceipt(tx: PendingTransaction): Promise<import("ethers/providers").TransactionReceipt>;
        getOperatorType: (tranche: string) => any;
    };
} & ActionsBase;
export declare type IAdminActions = {
    isWard(user: string, contractName: ContractNames): Promise<BN>;
    canSetInterestRate(user: string): Promise<boolean>;
    canSetSeniorTrancheInterest(user: string): Promise<boolean>;
    canSetMinimumJuniorRatio(user: string): Promise<boolean>;
    canSetRiskScore(user: string): Promise<boolean>;
    canSetInvestorAllowanceJunior(user: string): Promise<boolean>;
    canSetInvestorAllowanceSenior(user: string): Promise<boolean>;
    canSetLoanPrice(user: string): Promise<boolean>;
    initRate(rate: string): Promise<any>;
    setRate(loan: string, rate: string): Promise<any>;
    setMinimumJuniorRatio(amount: string): Promise<PendingTransaction>;
    approveAllowanceJunior(user: string, maxCurrency: string, maxToken: string): Promise<any>;
    approveAllowanceSenior(user: string, maxCurrency: string, maxToken: string): Promise<any>;
};
export default AdminActions;
