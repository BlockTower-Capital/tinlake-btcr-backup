import { Constructor, TinlakeParams } from '../Tinlake';
import { Loan, Investor } from '../types/tinlake';
import BN from 'bn.js';
export declare function AnalyticsActions<ActionsBase extends Constructor<TinlakeParams>>(Base: ActionsBase): {
    new (...args: any[]): {
        getTotalDebt: () => Promise<BN>;
        getTotalBalance: () => Promise<BN>;
        getPrincipal: (loanId: string) => Promise<BN>;
        getDebt: (loanId: string) => Promise<BN>;
        loanCount: () => Promise<BN>;
        getCollateral: (loanId: string) => Promise<any>;
        getOwnerOfCollateral: (nftRegistryAddress: string, tokenId: string) => Promise<BN>;
        getInterestRate: (loanId: string) => Promise<BN>;
        getOwnerOfLoan: (loanId: string) => Promise<any>;
        getStatus: (nftRegistryAddr: string, tokenId: string, loanId: string) => Promise<any>;
        getLoan: (loanId: string) => Promise<Loan | null>;
        getLoanList: () => Promise<Loan[]>;
        getInvestor: (user: string) => Promise<Investor>;
        getJuniorTokenBalance: (user: string) => Promise<any>;
        getJuniorTotalSupply: () => Promise<any>;
        getMaxSupplyAmountJunior: (user: string) => Promise<any>;
        getMaxRedeemAmountJunior: (user: string) => Promise<any>;
        getTokenPriceJunior: () => Promise<any>;
        existsSenior: () => boolean;
        getSeniorTokenBalance: (user: string) => Promise<any>;
        getSeniorTotalSupply: () => Promise<any>;
        getMaxSupplyAmountSenior: (user: string) => Promise<BN>;
        getMaxRedeemAmountSenior: (user: string) => Promise<BN>;
        getTokenPriceSenior: (user?: string | undefined) => Promise<BN>;
        getSeniorReserve: () => Promise<BN>;
        getJuniorReserve: () => Promise<any>;
        getMinJuniorRatio: () => Promise<any>;
        getCurrentJuniorRatio: () => Promise<any>;
        getAssetValueJunior: () => Promise<any>;
        getSeniorDebt: () => Promise<any>;
        getSeniorInterestRate: () => Promise<any>;
        provider: any;
        eth: import("../services/ethereum").ethI;
        ethOptions: any;
        ethConfig: import("../Tinlake").EthConfig;
        ethersConfig: import("../Tinlake").EthersConfig;
        contractAddresses: import("../Tinlake").ContractAddresses;
        transactionTimeout: number;
        contracts: import("../Tinlake").Contracts;
        ethersContracts: import("../Tinlake").Contracts;
        contractAbis: import("../Tinlake").ContractAbis;
        contractConfig: any;
        setProvider: (provider: any, ethOptions?: any, ethersConfig?: import("../Tinlake").EthersConfig | undefined) => void;
        setContracts: () => void;
        setEthConfig: (ethConfig: import("../Tinlake").EthConfig) => void;
        setEthersConfig: (ethersConfig: import("../Tinlake").EthersConfig | undefined) => void;
        createEthContract(address: string, abiName: "TINLAKE_CURRENCY" | "JUNIOR_OPERATOR" | "JUNIOR" | "JUNIOR_TOKEN" | "SENIOR" | "SENIOR_TOKEN" | "SENIOR_OPERATOR" | "DISTRIBUTOR" | "ASSESSOR" | "TITLE" | "PILE" | "SHELF" | "CEILING" | "COLLECTOR" | "THRESHOLD" | "PRICE_POOL" | "COLLATERAL_NFT" | "COLLATERAL_NFT_DATA" | "ROOT_CONTRACT" | "PROXY" | "PROXY_REGISTRY" | "ACTIONS" | "BORROWER_DEPLOYER" | "LENDER_DEPLOYER" | "NFT_FEED" | "GOVERNANCE" | "ALLOWANCE_OPERATOR"): void;
        createContract(address: string, abiName: "TINLAKE_CURRENCY" | "JUNIOR_OPERATOR" | "JUNIOR" | "JUNIOR_TOKEN" | "SENIOR" | "SENIOR_TOKEN" | "SENIOR_OPERATOR" | "DISTRIBUTOR" | "ASSESSOR" | "TITLE" | "PILE" | "SHELF" | "CEILING" | "COLLECTOR" | "THRESHOLD" | "PRICE_POOL" | "COLLATERAL_NFT" | "COLLATERAL_NFT_DATA" | "ROOT_CONTRACT" | "PROXY" | "PROXY_REGISTRY" | "ACTIONS" | "BORROWER_DEPLOYER" | "LENDER_DEPLOYER" | "NFT_FEED" | "GOVERNANCE" | "ALLOWANCE_OPERATOR"): import("ethers").Contract;
        contract(abiName: "TINLAKE_CURRENCY" | "JUNIOR_OPERATOR" | "JUNIOR" | "JUNIOR_TOKEN" | "SENIOR" | "SENIOR_TOKEN" | "SENIOR_OPERATOR" | "DISTRIBUTOR" | "ASSESSOR" | "TITLE" | "PILE" | "SHELF" | "CEILING" | "COLLECTOR" | "THRESHOLD" | "PRICE_POOL" | "COLLATERAL_NFT" | "COLLATERAL_NFT_DATA" | "ROOT_CONTRACT" | "PROXY" | "PROXY_REGISTRY" | "ACTIONS" | "BORROWER_DEPLOYER" | "LENDER_DEPLOYER" | "NFT_FEED" | "GOVERNANCE" | "ALLOWANCE_OPERATOR", address?: string | undefined): import("ethers").Contract;
        pending(txPromise: Promise<import("ethers/providers").TransactionResponse>): Promise<import("../Tinlake").PendingTransaction>;
        getTransactionReceipt(tx: import("../Tinlake").PendingTransaction): Promise<import("ethers/providers").TransactionReceipt>;
        getOperatorType: (tranche: string) => any;
    };
} & ActionsBase;
export declare type IAnalyticsActions = {
    getTotalDebt(): Promise<BN>;
    getTotalBalance(): Promise<BN>;
    getDebt(loanId: string): Promise<BN>;
    loanCount(): Promise<BN>;
    getLoanList(): Promise<Loan[]>;
    getLoan(loanId: string): Promise<Loan | null>;
    getCollateral(loanId: string): Promise<any>;
    getPrincipal(loanId: string): Promise<BN>;
    getInterestRate(loanId: string): Promise<BN>;
    getOwnerOfLoan(loanId: string): Promise<BN>;
    getOwnerOfCollateral(nftRegistryAddr: string, tokenId: string, loanId: string): Promise<BN>;
    existsSenior(): boolean;
    getJuniorReserve(): Promise<BN>;
    getSeniorReserve(): Promise<BN>;
    getJuniorTokenBalance(user: string): Promise<BN>;
    getSeniorTokenBalance(user: string): Promise<BN>;
    getMaxSupplyAmountJunior(user: string): Promise<BN>;
    getMaxRedeemAmountJunior(user: string): Promise<BN>;
    getMaxSupplyAmountSenior(user: string): Promise<BN>;
    getMaxRedeemAmountSenior(user: string): Promise<BN>;
    getTokenPriceJunior(): Promise<BN>;
    getTokenPriceSenior(user: string): Promise<BN>;
    getSeniorDebt(): Promise<BN>;
    getSeniorInterestRate(): Promise<BN>;
    getMinJuniorRatio(): Promise<BN>;
    getCurrentJuniorRatio(): Promise<BN>;
    getAssetValueJunior(): Promise<BN>;
    getInvestor(user: string): Promise<Investor>;
};
export default AnalyticsActions;
